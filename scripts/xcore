#!/usr/bin/env node

// Load required libraries.
var _ = require('underscore');
var logger = require('winston');
var fs = require('fs');
var path = require('path');
var cp = require('child_process');
var spawn = cp.spawn;
var exec = cp.exec;
var args = require('minimist')(process.argv.slice(2));

// Enable color for the logger.
logger.remove(logger.transports.Console);
logger.add(logger.transports.Console, {colorize: true});

var getExtensionManifests = function() {
  var extensionDirs = fs.readdirSync(path.join(__dirname, '../lib/extensions')),
      manifests = {};

  _.each(extensionDirs, function(dir, idx, dirs) {
    if (dir == '.git') { return true; }
    try {
    var contents = fs.readFileSync(path.join(
      __dirname,'../lib/extensions', dir, '/database/source/manifest.js'), 'utf8'),
      manifest = JSON.parse(contents);

      manifests[manifest.name] = manifest;
    } catch (err) {
      logger.error(err);
    }
  });

  return manifests;
};

// Removes the client code we copied from extensions into the enyo app.
var cleanup = function() {
  if (args.debug) {
    logger.info(
      "Client code is not cleaned up in debug mode. " +
      "Make sure you clean up extension created client code by hand " +
      "before running this command again."
    )
  } else {
    var manifests = getExtensionManifests();

    _.each(manifests, function(manifest) {
      _.each(['data', 'style', 'views'], function(dir) {
        var copiedCodeDir = path.join(
          __dirname,
          '../lib/client/source',
          dir, manifest.name
        );

        logger.info("Cleaning up - %s", copiedCodeDir);
        exec('rm -rf ' + copiedCodeDir);
      });

    });
  }
};

var buildDatabase = function () { logger.info("Attempting to build database."); };

// Copies client code from the extensions into lib/client.
var copyClientCode = function (callback) {
  // Collect all the extension manifest and and sort by load order.
  logger.info("Copying extensions into client.");
  var manifests = getExtensionManifests();

  _.each(manifests, function(manifest) {
    if(manifest.dependencies) {
      _.each(manifest.dependencies, function (depName) {
        var depManifest = manifests[depName];
        if(depManifest.loadOrder > manifest.loadOrder) {
          // TODO: This error message sucks
          logger.error(
            "Extension '%s' has a load order of %s. It's dependent '%s' has a load order of %s. " +
            "Extensions can't have a lower load order than their dependencies.",
            manifest.name, manifest.loadOrder, depManifest.name, depManifest.loadOrder
          );
          process.exit(1);
        }
      });
    }
  });

  manifests = _.sortBy(manifests, 'loadOrder');

  _.each(manifests, function(manifest) {
    var clientCodeDir = path.join(__dirname, '../lib/extensions/', manifest.name, '/client');
    var dirs = fs.readdirSync(clientCodeDir);
    _.each(dirs, function (dir) {
      exec('cp -R ' +
        clientCodeDir + '/' + dir + ' ' + // Extension client code path.
        path.join(__dirname, '../lib/client/source/', dir, manifest.name)
      );
    });
  });

  callback(function() { console.log("Hello")});
};

/**
  * Link extension client code to enyo's lib folder then run the enyo deploy.sh
  * script. The compiled client code should be in the lib/client/build folder.
*/
var buildClient = function () {
  logger.info("Attempting to build client code.");

  // Copy the extension client code into lib/client.
  copyClientCode(function (callback) {
    var deployScript = path.join(__dirname, '../lib/client/tools/deploy.sh');
    var build = spawn(deployScript, ['-T'], { stdio: 'inherit' });
    callback();
  });

  /**
     * Spawn doesn't exit so this code isn't executing. Let's look into it later.
     * Not critical at the moment.
  */
  // build.on('exit', function(code) {
  //   if (code > 0) {
  //     logger.error(
  //       "Looks like there was a problem building the client code." +
  //       "Most likely this is enyo's deploy.sh failing and not xCore." +
  //       "Try running xcore/lib/client/tools/deploy.sh -T for clues."
  //       );
  //   }
  // });
};

var buildAll = function () {
  buildDatabase();
  buildClient();
};

// Handle the command line arguments.
_.each(args._, function(arg, idx, argz) {
  switch(arg) {

    // Print usage information
    case 'help':
      console.log("Help & usage information will go here.");
      process.exit(0);

    // Print the xCore version
    case 'version':
      // Grab the version number from the package.json file.
      var packageJson = fs.readFileSync(path.join(__dirname, "../package.json"));
      console.log("Version: " + JSON.parse(packageJson).version);
      process.exit(0);

    // Build the client, database or both.
    case 'build':
      toBuild = argz[idx+1];

      switch(toBuild) {
        case 'all':
          buildAll();
          process.exit(0);

        case 'client':
          buildClient();
          process.exit(0);

        case 'database':
          buildDatabase();
          process.exit(0);
      }
      process.exit(0);
  }

});
